{"ast":null,"code":"let initialState = {\n  todos: localStorage.getItem(\"item\") ? JSON.parse(localStorage.getItem(\"item\")) : [{\n    id: Date.now(),\n    title: \"create react-redux APP\",\n    important: false,\n    done: false\n  }],\n  getCountTodos: () => {\n    return this.todos.length;\n  },\n  filterType: 'All',\n  setVisible: false\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD TODO\":\n      if (action.payload.title === '') {\n        return state;\n      }\n\n      return { ...state,\n        todos: [...state.todos, action.payload]\n      };\n\n    case \"REMOWE TODO\":\n      return { ...state,\n        todos: state.todos.filter(item => item.id !== action.payload)\n      };\n\n    case \"MARK IMPORTANT\":\n      return { ...state,\n        todos: state.todos.map(item => item.id === action.payload ? { ...item,\n          important: !item.important\n        } : item)\n      };\n\n    case \"MARK DONE\":\n      return { ...state,\n        todos: state.todos.map(item => item.id === action.payload ? { ...item,\n          done: !item.done\n        } : item)\n      };\n\n    case \"FILTER ALL\":\n      return { ...state,\n        filterType: 'All'\n      };\n\n    case \"FILTER DONE\":\n      return { ...state,\n        filterType: 'Done'\n      };\n\n    case \"FILTER IMPORTANT\":\n      return { ...state,\n        filterType: 'Important'\n      };\n\n    case \"SET FORM VISIBLE\":\n      return { ...state,\n        setVisible: !state.setVisible\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/MaximKireev/Desktop/Project/React practice/App-ToDo-with-redx/src/components/reducer.js"],"names":["initialState","todos","localStorage","getItem","JSON","parse","id","Date","now","title","important","done","getCountTodos","length","filterType","setVisible","reducer","state","action","type","payload","filter","item","map"],"mappings":"AAAA,IAAIA,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,MAArB,IACHC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADG,GAEH,CACE;AACEG,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADN;AAEEC,IAAAA,KAAK,EAAE,wBAFT;AAGEC,IAAAA,SAAS,EAAE,KAHb;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADF,CAHW;AAWfC,EAAAA,aAAa,EAAE,MAAM;AACnB,WAAO,KAAKX,KAAL,CAAWY,MAAlB;AACD,GAbc;AAcfC,EAAAA,UAAU,EAAE,KAdG;AAefC,EAAAA,UAAU,EAAE;AAfG,CAAnB;;AAkBE,MAAMC,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBjB,YAAyB;AAAA,MAAXkB,MAAW;;AAEhD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACC,UAAID,MAAM,CAACE,OAAP,CAAeX,KAAf,KAAyB,EAA7B,EAAiC;AAAC,eAAOQ,KAAP;AAAa;;AAC9C,aAAO,EAAE,GAAGA,KAAL;AAAYhB,QAAAA,KAAK,EAAE,CAAC,GAAGgB,KAAK,CAAChB,KAAV,EAAiBiB,MAAM,CAACE,OAAxB;AAAnB,OAAP;;AAEF,SAAK,aAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELhB,QAAAA,KAAK,EAAEgB,KAAK,CAAChB,KAAN,CAAYoB,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACE,OAAhD;AAFF,OAAP;;AAIF,SAAK,gBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELhB,QAAAA,KAAK,EAAEgB,KAAK,CAAChB,KAAN,CAAYsB,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACE,OAAnB,GACI,EAAE,GAAGE,IAAL;AAAWZ,UAAAA,SAAS,EAAE,CAACY,IAAI,CAACZ;AAA5B,SADJ,GAEIY,IAHC;AAFF,OAAP;;AAQF,SAAK,WAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELhB,QAAAA,KAAK,EAAEgB,KAAK,CAAChB,KAAN,CAAYsB,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAAChB,EAAL,KAAYY,MAAM,CAACE,OAAnB,GAA6B,EAAE,GAAGE,IAAL;AAAWX,UAAAA,IAAI,EAAE,CAACW,IAAI,CAACX;AAAvB,SAA7B,GAA6DW,IADxD;AAFF,OAAP;;AAMF,SAAK,YAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAK,aAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAKA,SAAK,kBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELH,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIA,SAAK,kBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELF,QAAAA,UAAU,EAAE,CAACE,KAAK,CAACF;AAFd,OAAP;;AAIN;AACE,aAAOE,KAAP;AAhDJ;AAkDD,CApDD;;AAsDA,eAAeD,OAAf","sourcesContent":["let initialState = {\r\n    todos: localStorage.getItem(\"item\")\r\n      ? JSON.parse(localStorage.getItem(\"item\"))\r\n      : [\r\n          {\r\n            id: Date.now(),\r\n            title: \"create react-redux APP\",\r\n            important: false,\r\n            done: false\r\n          }\r\n        ],\r\n    getCountTodos: () => {\r\n      return this.todos.length;\r\n    },\r\n    filterType: 'All',\r\n    setVisible: false\r\n  };\r\n  \r\n  const reducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {\r\n      case \"ADD TODO\":\r\n       if( action.payload.title === '') {return state}\r\n        return { ...state, todos: [...state.todos, action.payload] };\r\n  \r\n      case \"REMOWE TODO\":\r\n        return {\r\n          ...state,\r\n          todos: state.todos.filter((item) => item.id !== action.payload)\r\n        };\r\n      case \"MARK IMPORTANT\":\r\n        return {\r\n          ...state,\r\n          todos: state.todos.map((item) =>\r\n            item.id === action.payload\r\n              ? { ...item, important: !item.important }\r\n              : item\r\n          )\r\n        };\r\n      case \"MARK DONE\":\r\n        return {\r\n          ...state,\r\n          todos: state.todos.map((item) =>\r\n            item.id === action.payload ? { ...item, done: !item.done } : item\r\n          )\r\n        };\r\n      case \"FILTER ALL\":\r\n        return {\r\n          ...state,\r\n          filterType: 'All'\r\n        };\r\n      case \"FILTER DONE\":\r\n        return {\r\n          ...state,\r\n          filterType: 'Done'\r\n        };\r\n\r\n        case \"FILTER IMPORTANT\":\r\n          return {\r\n            ...state,\r\n            filterType: 'Important'\r\n          };\r\n          case \"SET FORM VISIBLE\":\r\n            return {\r\n              ...state,\r\n              setVisible: !state.setVisible\r\n            };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  "]},"metadata":{},"sourceType":"module"}